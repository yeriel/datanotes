{"config":{"lang":["es"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\u00a1Bienvenido a DataNotes!","text":"<p>\u00a1Hola! Este es el lugar donde comparto mis notas y conocimientos sobre temas que me apasionan. En DataNotes, encontrar\u00e1s informaci\u00f3n detallada y reflexiones sobre una amplia gama de \u00e1reas, desde programaci\u00f3n hasta inteligencia artificial. Aqu\u00ed tienes una vista general de lo que puedes explorar:</p> <ul> <li> <p> Software</p> <p>Descubre los fundamentos y herramientas esenciales para el desarrollo de software en Python.</p> <p> Comenzar</p> </li> <li> <p> Estad\u00edstica y Probabilidades</p> <p>Aprende a analizar datos de manera efectiva. Desde conceptos b\u00e1sicos hasta t\u00e9cnicas avanzadas de interpretaci\u00f3n.</p> <p> Explorar</p> </li> <li> <p> Matem\u00e1ticas</p> <p>Explora los diversos aspectos de las matem\u00e1ticas, incluyendo \u00e1lgebra, c\u00e1lculo y teor\u00eda de n\u00fameros.</p> <p> Comenzar</p> </li> <li> <p> Inteligencia Artificial</p> <p>Sum\u00e9rgete en el mundo de la inteligencia artificial y aprende sobre c\u00f3mo los agentes pueden interactuar y razonar.</p> <p> Explorar</p> </li> <li> <p> Machine Learning</p> <p>Descubre c\u00f3mo el machine learning est\u00e1 transformando sectores, permitiendo que las m\u00e1quinas aprendan y comprendan datos.</p> <p> Comenzar</p> </li> <li> <p> Deep Learning</p> <p>Ad\u00e9ntrate en el profundo mundo de las redes neuronales, las cuales simulan el cerebro para resolver problemas complejos.</p> <p> Explorar</p> </li> </ul>"},{"location":"#por-que-compartir-estos-apuntes","title":"\u00bfPor qu\u00e9 compartir estos apuntes?","text":"<p>Mis apuntes son m\u00e1s que un recurso personal; son una herramienta abierta para cualquier persona interesada en estos temas. Mi objetivo es proporcionar informaci\u00f3n clara, accesible y \u00fatil para facilitar tu comprensi\u00f3n y aplicaci\u00f3n de estos conceptos. Ya seas estudiante, profesional o simplemente un entusiasta, espero que encuentres aqu\u00ed los recursos que te ayuden en tu propio viaje de aprendizaje.</p> <p></p>"},{"location":"topics/software/py/fundamentos/","title":"Fundamentos","text":""},{"location":"topics/software/py/fundamentos/#que-es-python","title":"\u00bfQue es Python?","text":"<p>Python es un lenguaje de programaci\u00f3n de alto nivel interpretado, din\u00e1mico y multiplataforma, cuya filosof\u00eda hace hincapi\u00e9 en la legibilidad del c\u00f3digo. Este es un lenguaje  multiparadigma, es decir, se puede escribir c\u00f3digo en diferentes paradigmas de programaci\u00f3n ya sea imperativo, orientado a objetos o funcional.</p> <p>Python utiliza la indentaci\u00f3n para indicar donde empieza y donde termina un bloque de c\u00f3digo. Esto genera un c\u00f3digo limpio y f\u00e1cil de leer, ademas se pueden a\u00f1adir comentarios para dejar en claro que es lo que hace el c\u00f3digo.</p>"},{"location":"topics/software/py/fundamentos/#variables","title":"Variables","text":"<p>Las variables permiten guardar valores que se pueden reutilizar en diferentes partes del c\u00f3digo. Para crear una en Python se debe especificar un nombre y asignarle un valor.  </p> <pre><code>'''\nEste es un ejemplo de \ncomentario largo en python\n'''\ndef function():\n    variable_a = 2 #Este es un ejemplo de como crear una variable\n    return variable_a\nprint(function)\n</code></pre>"},{"location":"topics/software/py/fundamentos/#tipos-de-datos","title":"Tipos de datos","text":"<p>Los objetos que contienen los datos en Python pueden ser de dos estilos mutables (son aquellos que se pueden modificar) e inmutables (Son aquellos que no se pueden modificar).</p> <ul> <li>Inmutables:  tuplas (tuples), conjuntos (set).  </li> <li>Mutables: enteros (int), decimales (float), complejos (complex), cadena texto (string/str), listas (list), diccionarios (dict).</li> </ul> Tipo Clase Valor Descripci\u00f3n Booleanos bool True o False Entero int 100 Decimal float 100.500 Complejo complex 100-10j Cadena texto str 'esto es una cadena de texto' Lista list [ 1,'lista',2.3,4+2 j] Colecci\u00f3n de datos mutables Tupla tuples ( 1,2,3,4,5 ) Colecci\u00f3n de datos inmutables Diccionario dict { 1 : 'uno', 2 : 'dos'} Llave son inmutables los valores mutables Conjunto set {1,2,3,4} Tiene solo valores \u00fanicos"},{"location":"topics/software/py/fundamentos/#tipos-de-operadores","title":"Tipos de operadores","text":""},{"location":"topics/software/py/fundamentos/#aritmeticos","title":"Aritm\u00e9ticos","text":"<p>Los operadores aritm\u00e9ticos son aquellos que se utilizan para realizar operaciones matem\u00e1ticas sencillas.</p> Operador Funci\u00f3n Ejemplos Resultado \u201c+\u201d Sumar 2 + 2 4 \u201c-\u201c Restar 3 \u2013 2 1 \u201c*\u201d Multiplicar 2 * 2 4 \u201c/\u201d Dividir 4 / 4 2 \u201c%\u201d M\u00f3dulo: Devolver\u00e1 el resto de la divisi\u00f3n 4 % 2 0 \u201c**\u201d Exponente: Exponencial de un n\u00famero 3 ** 2 9 \u201c//\u201d Divisi\u00f3n devuelve el entero de la misma 8 // 4 2"},{"location":"topics/software/py/fundamentos/#comparacion","title":"Comparaci\u00f3n","text":"<p>Los operadores de comparaci\u00f3n son aquellos que se utilizan para comparar valores y nos devolver\u00e1 True / False como resultado de la condici\u00f3n.</p> Operador Funci\u00f3n Ejemplos Resultado \u201c==\u201d Si dos valores son exactamente iguales! 2 == 2 True 2 == 3 False \u201c!=\u201d Si dos valores son diferentes devuelve True! 2 != 5 True 2 != 2 False \u201c&gt;\u201d Si el valor de la izquierda es mayor que el de la derecha devuelve True 4 &gt; 2 True 1 &gt; 2 False \u201c&lt;\u201c Si el valor de la izquierda es menor que el de la derecha devuelve True 1 &lt; 2 True"},{"location":"topics/software/py/fundamentos/#logico","title":"L\u00f3gico","text":"<p>Se utiliza un operador l\u00f3gico para tomar una decisi\u00f3n basada en m\u00faltiples condiciones. </p> Operador Descripci\u00f3n Uso and Devuelve True si ambos operandos   son True a and b or Devuelve True si alguno de los   operandos es True a or b not Devuelve True si alguno de los   operandos False not a"},{"location":"topics/software/py/fundamentos/#control-de-flujo-o-condicionales","title":"Control de flujo o Condicionales","text":"<p>En Python se puede definir una serie de condicionales utilizando if, elif o else.</p> <pre><code>if condicion 1:\n    #bloque de c\u00f3digo A\nelif condicion 2:\n    #bloque de c\u00f3digo B\nelse:\n    #bloque de c\u00f3digo C\n\n'''Operador ternario -&gt; es realizar un control \nde flujo en una sola linea de c\u00f3digo. Un ejemplo\nes la siguiente linea de c\u00f3digo\n'''\n'mayor a 2' if x &gt; 2 else 'menor a 2'\n</code></pre>"},{"location":"topics/software/py/fundamentos/#bucles-o-iteraciones","title":"Bucles o iteraciones","text":"<p>Los bucles permiten repetir una tarea en varias veces. Existen diferentes modificadores del flujo de un bucle estos son</p> <ul> <li>else: Se ejecutan un bloque de c\u00f3digo cuando la condici\u00f3n ya no devuelve true. Solo valido para bucle while.</li> <li>break: rompe la ejecuci\u00f3n del bucle en cualquier momento</li> <li>continue: salta la iteraci\u00f3n actual sin romper el bucle   </li> </ul>"},{"location":"topics/software/py/fundamentos/#while","title":"While","text":"<p>Permite que se repita un bloque de c\u00f3digo mientras la condici\u00f3n l\u00f3gica tenga como resultado un valor verdadero (True)</p> <pre><code>contador = 0 \nwhile contador &lt; 3:\n    print(contador)\n    contador +=1 #Es igual a contador = contador + 1\n#output\n0\n1\n2\n</code></pre>"},{"location":"topics/software/py/fundamentos/#for","title":"For","text":"<p>En Python, el bucle for es un bucle definido, es decir, se preestablece las condiciones de la iteraci\u00f3n por adelantado.</p> <ul> <li>Iterable: Tipo de dato que se puede secuenciar como lo puede ser un string, lista, tupla o diccionario.</li> <li>Iterator: Objeto especifico que se obtiene a partir de un iterable</li> </ul> <pre><code>frutas = ['kiwi','mango','pi\u00f1a']\nfor fruta in frutas\n    print(fruta)\n\n#output\nkiwi\nmango\npi\u00f1a\n</code></pre>"},{"location":"topics/software/py/fundamentos/#funciones","title":"Funciones","text":"<p>En Python la definici\u00f3n de funciones se realiza mediante la palabra reservada def mas un nombre de la funci\u00f3n que sea descriptivo, seguido de par\u00e9ntesis. </p> <p><pre><code>def sumar(num1, num2):\n    return num1 + num2\nprint(sumar(1,2))\n\n#output\n3\n</code></pre> En Python tambi\u00e9n existen la funciones lambda que es una funci\u00f3n an\u00f3nima, es decir, una funci\u00f3n que no lleva nombre.</p> <pre><code>lambda num1, num2 : num1 + num2\n</code></pre>"},{"location":"topics/software/py/fundamentos/#generadores","title":"Generadores","text":"<p>Un generador es un tipo de funci\u00f3n que produce secuencias completas de resultados. En lugar de ofrecer un valor \u00fanico.</p> <pre><code>'''La forma mas b\u00e1sica de \ncrear un generador'''\ndef generator():\n    yield 'uno'\n\nfor valor in generator():\n    print(valor) \n\n#output\nuno \n\n'''Otra forma de crear \nun generador en una linea'''\ngenerator = (i for i in range(3))\n\nfor valor in generator:\n    print(valor) \n\n#output\n0 \n1\n2\n</code></pre>"},{"location":"topics/software/py/fundamentos/#decoradores","title":"Decoradores","text":"<p>Un decorador es un tipo de funci\u00f3n la cual recibe como par\u00e1metro una funci\u00f3n y a su vez retorna otra funci\u00f3n, es decir,  a(b) -&gt; c.</p> <p><pre><code>def function_a(function_b):\n    def function_c():\n        #block code\n        function_b()\n    return function_c\n\n@function_a\ndef function():\n    print('Hello') \n</code></pre> Al decorar una funci\u00f3n esta modifica su comportamiento sin tener que modificar su c\u00f3digo. Es muy util si se quiere crear nuevas funcionalidades.</p>"},{"location":"topics/software/py/fundamentos/#manejo-de-excepciones","title":"Manejo de excepciones","text":"<p>Una excepci\u00f3n es un error detectado durante la ejecuci\u00f3n. Para esto Python tiene las palabras reservadas try, except, finally.</p> <pre><code>while True\n    try: #Intenta ejecutar el c\u00f3digo\n        x = int(input('Ingrese un numero: '))\n        break\n    except ValueError:\n        print('Oops hay un error')\n</code></pre> <p>El flujo para el manejo de excepciones primero se ejecuta el bloque try, si no ocurre ninguna excepci\u00f3n, el bloque except se salta y termina la ejecuci\u00f3n pero si ocurre una excepci\u00f3n dentro del bloque try, el resto del bloque se salta y se ejecuta el excepci\u00f3n.  </p>"},{"location":"topics/software/py/poo/","title":"Programaci\u00f3n orientada a objetos","text":"<p>La programaci\u00f3n orientada a objetos (POO) es un paradigma de programaci\u00f3n que parte del concepto de \"objetos\" como base, los cuales contienen informaci\u00f3n en forma de atributos o propiedades y c\u00f3digo en forma de m\u00e9todos.</p> <p>Los objetos son capaces de interactuar y modificar los valores contenidos en sus atributos (estado) a trav\u00e9s de sus m\u00e9todos (comportamiento). Un ejemplo de objeto puede ser un perro que tiene como:</p> <ul> <li>Atributos: nombre, color, raza, edad, etc. </li> <li>M\u00e9todos: ladrar, caminar, comer, etc.</li> </ul>"},{"location":"topics/software/py/poo/#clase","title":"Clase","text":"<p>Una clase es una especie de \"plantilla\" en la que se definen los atributos y m\u00e9todos predeterminados de un tipo de objeto.</p>"},{"location":"topics/software/py/poo/#objeto","title":"Objeto","text":"<p>Instancia de una clase. Entidad provista de un conjunto de propiedades o atributos (datos) y de comportamiento o funcionalidad (m\u00e9todos), los mismos que consecuentemente reaccionan a eventos. Se corresponden con los objetos reales del mundo que nos rodea.</p>"},{"location":"topics/software/py/poo/#metodo","title":"M\u00e9todo","text":"<p>Algoritmo asociado a un objeto (o a una clase de objetos), cuya ejecuci\u00f3n se desencadena tras la recepci\u00f3n de un \"mensaje\". Desde el punto de vista del comportamiento, es lo que el objeto puede hacer. Un m\u00e9todo puede producir un cambio en las propiedades del objeto, o la generaci\u00f3n de un \"evento\"</p> <pre><code>#Clase\nclass Dog:\n    def __init__(self,name,age):\n        self.name = name\n        self.age = age\n    #M\u00e9todo\n    def bark(self)\n        return f'{self.name} is bark'\n\n#Objeto\ndog_1 = Dog('wolf',5)\ndog_1.bark()\n</code></pre>"},{"location":"topics/software/py/poo/#abstraccion","title":"Abstracci\u00f3n","text":"<p>Denota las caracter\u00edsticas esenciales de un objeto, donde se capturan sus comportamientos. Cada objeto en el sistema sirve como modelo de un \"agente\" abstracto que puede realizar trabajo, informar y cambiar su estado, y \"comunicarse\" con otros objetos en el sistema sin revelar \"c\u00f3mo\" se implementan estas caracter\u00edsticas. </p> <p>Los procesos, las funciones o los m\u00e9todos pueden tambi\u00e9n ser abstra\u00eddos, y, cuando lo est\u00e1n, una variedad de t\u00e9cnicas son requeridas para ampliar una abstracci\u00f3n. </p> <p>El proceso de abstracci\u00f3n permite seleccionar las caracter\u00edsticas relevantes dentro de un conjunto e identificar comportamientos comunes para definir nuevos tipos de entidades en el mundo real.</p>"},{"location":"topics/software/py/poo/#encapsulamiento","title":"Encapsulamiento","text":"<p>Significa reunir todos los elementos que pueden considerarse pertenecientes a una misma entidad, al mismo nivel de abstracci\u00f3n. Esto permite aumentar la cohesi\u00f3n (dise\u00f1o estructurado) de los componentes del sistema, es decir, se puede restringir el acceso a atributos y m\u00e9todos.</p> <p>Existen dos formas de crear atributos privados en Python:</p> <ul> <li> <p>Forma 1: Con un guion bajo delante del nombre del atributo, esto establece por convenci\u00f3n que el atributo es privado pero no es realmente a nivel de c\u00f3digo.</p> </li> <li> <p>Forma 2: Con doble guion bajo delante del nombre del atributo, de esta forma si son privados a nivel de c\u00f3digo.</p> </li> </ul>"},{"location":"topics/software/py/poo/#herencia","title":"Herencia","text":"<p>Las clases no se encuentran aisladas, sino que se relacionan entre s\u00ed, formando una jerarqu\u00eda de clasificaci\u00f3n. Los objetos heredan las propiedades y el comportamiento de todas las clases a las que pertenecen.</p> <p>La herencia organiza y facilita el polimorfismo y el encapsulamiento, permitiendo a los objetos ser definidos y creados como tipos especializados de objetos preexistentes. Estos pueden compartir (y extender) su comportamiento sin tener que volver a implementarlo.</p> <pre><code>#Clase base o padre\nclass Quadrilateral:\n    def __init__(self,sides):\n        self.sides = sides\n\n    def perimeter(self).\n        return self.sides\n\n#Clase heredara o hija\nclass square(Quadrilateral):\n    def __init__(self,sides):\n        super().__init__(sides)\n\n'''super() es una funci\u00f3n que \npermite acceder a los atributos \ny m\u00e9todos de la clases base'''\n</code></pre>"},{"location":"topics/software/py/poo/#herencia-multiple","title":"Herencia multiple","text":"<p>Una clase puede derivarse de mas una clase base, adquiriendo todos los atributos y m\u00e9todos son heredados</p> <pre><code>#Clase base1\nclass Base_1:\n    pass\n\n#Clase base2\nclass Base_2:\n    pass\n\n#Clase multi heredara\nclass Son_1(Base_1,Base_2):\n    pass\n\n'''herencia multi nivel es heredar\nde una clase ya hija de otra clase'''\n#Clase que util\u00edzala herencia multi nivel\nclass Son_2(Son_1):\n    pass\n\n'''pass es una operaci\u00f3n nula,\ncuando se ejecuta, nada pasa'''\n</code></pre>"},{"location":"topics/software/py/poo/#polimorfismo","title":"Polimorfismo","text":"<p>Comportamientos diferentes, asociados a objetos distintos, pueden compartir el mismo nombre; al llamarlos por ese nombre se utilizar\u00e1 el comportamiento correspondiente al objeto que se est\u00e9 usando.</p> <pre><code>#Clase base\nclass Animal:\n    def talk(self):\n        pass\n\nclass Dog(Animal):\n    def talk(self):\n        print('guau')\n\nclass Cat(Animal):\n    def talk(self):\n        print('miau')\n\nclass Cow(Animal):\n    def talk(self):\n        print('muuu')\n\nanimals = [Dog(),Cat(),Cow()]\nfor animal in animals:\n    animal.talk()\n\n#output\nguau\nmiau\nmuu\n</code></pre>"},{"location":"topics/software/py/tips/","title":"Tips","text":""},{"location":"topics/software/py/tips/#one-liners","title":"One Liners","text":""},{"location":"topics/software/py/tips/#intercambio-de-variables","title":"intercambio de variables","text":"<pre><code>'''1. swap variables'''\na = 5\nb = 10\na,b = b,a \n</code></pre>"},{"location":"topics/software/py/tips/#compresion-de-listas","title":"Compresion de listas","text":"<pre><code>'''2. list comprehension'''\n# normal use\nsquares = []\nfor i in range(10):\n    ifi i%2 == 0:\n        squares.append(i*i)\n\n# list comprehension use\nsquares = [i*i for i in range(10) if i%2 == 0]\n</code></pre>"},{"location":"topics/software/py/tips/#operador-ternario","title":"Operador ternario","text":"<pre><code>'''3. if else (ternary operator)'''\n#normal use\nif n &gt; 2:\n    var = 42\nelse:\n    var = 99\n\n#ternary operator use \nvar = 42 if n &gt; 2 else 99\n</code></pre>"},{"location":"topics/software/py/tips/#prints-en-una-sola-linea","title":"Prints en una sola linea","text":"<pre><code>'''4. print without new lines'''\n#normal use\ndata = [0, 1, 2, 3, 4, 5]\nfor i in data:\n    print(i, end=\" \")\n\n# print without new lines (GOAT)\nprint(*data) #output 0 1 2 3 4 5\n</code></pre>"},{"location":"topics/software/py/tips/#dar-vuelta-una-lista","title":"Dar vuelta una lista","text":"<pre><code>'''5. reversing a list'''\na = [1, 2, 3, 4, 5, 6]\na = a[::-1] #output [6, 5, 4, 3, 2, 1]\n</code></pre>"},{"location":"topics/software/py/tips/#asignacion-multiple","title":"Asignacion multiple","text":"<pre><code>'''6. multiple variable assignments'''\nname, age, language = 'Python', 30, 'US'\n</code></pre>"},{"location":"topics/software/py/tips/#obtener-n-separados-por-espacio","title":"Obtener n\u00b0 separados por espacio","text":"<pre><code>'''7. space separated numbers to integer list'''\nuser_input = '1 2 3 4 5'\nmy_list = list(map(int, user_input.split()))\n#output [1, 2, 3, 4, 5]\n</code></pre>"},{"location":"topics/software/py/tips/#lectura-de-archivo","title":"Lectura de archivo","text":"<pre><code>'''8. reading file into list'''\nnames = [line.strip() for line in open('names.txt','r')]\n#output ['name1', 'name2', 'name3']\n</code></pre>"},{"location":"topics/software/py/tips/#refactoring-tips","title":"Refactoring Tips","text":"<pre><code>''' 1. merge append into list declaration'''\n# bad\nplayers = []\nplayers.append('name1') \nplayers.append('name2') \nplayers.append('name3') \n\n# good\nplayers = ['name1','name2','name3']\n\n'''2. use items() to directly unpack dictionary values'''\n# bad\nteams_by_color = {'blue':['name1','name2']}\nfor team_color in teams_by_colors:\n    players = teams_by_color[team_color]\n    if is_winning(team_color):\n        advance_level(players)\n\n# good\nteams_by_color = {'blue':['name1','name2']}\nfor team_color in teams_by_colors.items():\n    if is_winning(team_color):\n        advance_level(players)\n\n'''3. replace range(len()) with enumerate()'''\n# bad\nfor i in range(len(players)):\n    print(i,players[i])\n\n# good\nfor i, player in enumerate(players):\n    print(i,player)\n\n'''4. simplify conditional into return statement'''\n# bad\ndef function():\n    if is_a('a'): #is_a return True if input is 'a'\n        return True\n    return False\n\n# good\ndef function()\n    return is_a('a')\n\n'''5. replace yield inside for loop with yield from'''\n# bad\ndef get_content(entry):\n    for block in entry.get_blocks():\n        yield block\n\n# good more info in PEP380\ndef get_content(entry):\n    yield from entry.get_blocks()\n</code></pre>"},{"location":"topics/software/py/tips/#refactoring-for-loops","title":"Refactoring For Loops","text":"<pre><code>'''1. don't use loops at all'''\n# bad\nnumbers = [10,20,30]\nresult = 0\nfor num in numbers:\n    result += num\n\n# good\nresult = sum(numbers)\n\n'''2. Use zip()'''\na = [1,2,3]\nb = ['a','b','c']\n# bad\nfor idx in range(len(a)):\n    print(a[idx],b[idx])\n\n# good\nfor val1, val2 in zip(a,b, strict=True):\n    print(val1, val2)\n\n'''3. Use itertools'''\n# bad \nfor item in [1,2,4,-1,4,1]:\n    if item &gt;= 0:\n        print(item)\n    else:\n        break\n\n# good\nfrom itertools import takewhile\nitems = takewhile(lambda x: x &gt;= 0, [1,2,4,-1,4,1])\nfor item in items:\n    print(item)\n</code></pre>"}]}